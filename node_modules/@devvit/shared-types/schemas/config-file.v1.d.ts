import type { JSONValue } from '../json.js';
/**
 * devvit.json with defaults. See config-file.v1.json schema. Schema is assumed
 * to be v1.
 */
export type AppConfig = {
    schema: 'v1';
    name: string;
    media?: {
        dir: string;
    };
    permissions: AppPermissionConfig;
    post?: AppPostConfig;
    server?: AppServerConfig;
    blocks?: {
        entry: string;
    };
    /** The original config as parsed. Used for writebacks. */
    json: AppConfigJSON;
};
export type AppHeightConfig = 'regular' | 'tall';
export type AppPermissionConfig = {
    http: {
        enabled: boolean;
        allowedDomains: string[];
    };
    media: boolean;
    payments: boolean;
    realtime: boolean;
    redis: boolean;
    reddit: {
        enabled: boolean;
        scope: AppScopeConfig;
        asUser: string[];
    };
};
export type AppPostConfig = {
    client: AppPostClientConfig;
    create: AppPostCreateConfig;
};
export type AppPostClientConfig = {
    dir: string;
    entry: string;
};
export type AppPostCreateConfig = {
    title: string;
    height: AppHeightConfig;
    menu: {
        enable: boolean;
        label: string;
        scope: AppScopeConfig;
    };
    onInstall: boolean;
};
export type AppScopeConfig = 'user' | 'moderator';
export type AppServerConfig = {
    entry: string;
};
/**
 * https://transform.tools/json-schema-to-typescript
 * @internal
 */
export type AppConfigJSON = {
    $schema?: string;
    name: string;
    media?: {
        dir?: string;
    };
    permissions?: {
        http?: {
            enabled?: boolean;
            allowedDomains?: string[];
        };
        media?: boolean;
        payments?: boolean;
        realtime?: boolean;
        redis?: boolean;
        reddit?: {
            enabled?: boolean;
            scope?: AppScopeConfig;
            asUser?: string[];
        };
    };
    post?: {
        client?: {
            dir?: string;
            entry?: string;
        };
        create?: {
            title?: string;
            height?: AppHeightConfig;
            menu?: {
                enable?: boolean;
                label?: string;
                scope?: AppScopeConfig;
            };
            onInstall?: boolean;
        };
    };
    server?: {
        entry?: string;
    };
    blocks?: {
        entry?: string;
    };
    /** User data. */
    [key: string]: JSONValue;
};
/** All server endpoints must start with this prefix. */
export declare const apiPathPrefix = "/api/";
export declare function parseAppConfig(str: string): AppConfig;
export declare function parseAppConfigJSON(json: JSONValue): AppConfig;
//# sourceMappingURL=config-file.v1.d.ts.map
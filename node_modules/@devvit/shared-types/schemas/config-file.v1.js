import jsonschema from 'jsonschema/lib/index.js';
import schema from './config-file.v1.json' with { type: 'json' };
/** All server endpoints must start with this prefix. */
export const apiPathPrefix = '/api/';
export function parseAppConfig(str) {
    if (!str)
        throw Error('config is empty');
    let json;
    try {
        json = JSON.parse(str);
    }
    catch (err) {
        throw Error(`cannot parse config JSON`, { cause: err });
    }
    return parseAppConfigJSON(json);
}
export function parseAppConfigJSON(json) {
    const ret = jsonschema.validate(json, schema);
    if (!ret.valid)
        throw new Error(ret.errors
            .map((err) => {
            if (!err.path.length && err.name === 'anyOf' && /\[subschema \d\]/.test(err.stack))
                return 'config requires property "post", "server", or "blocks".';
            return err.stack.replaceAll('instance.', '').replaceAll('instance', 'config');
        })
            .join('; '));
    const instance = ret.instance;
    if (instance.$schema != null && instance.$schema !== schema.$id)
        console.warn(`Unknown schema "${instance.$schema}."`);
    return AppConfig(instance);
}
// jsonschema only supports rewrite hooks but it's easier to update defaults
// after validation when the entire config is known. Eg,
// `config.permissions.http` has a different default if `config.server` is set.
//
// Ajv supports some default application but it seems like some features are
// still missing (https://github.com/ajv-validator/ajv/issues/1158). Even if the
// feature is added, we need the defaults in the properties for documentation
// and the same dynamic default adjustments as above are required.
function AppConfig(json) {
    const config = {
        schema: 'v1', // Always assume v1 since that's all that's supported.
        name: json.name,
        permissions: AppPermissionConfig(json),
        json,
    };
    if (json.media)
        config.media = {
            dir: json.media.dir ?? schema.properties.media.properties.dir.default,
        };
    if (json.post)
        config.post = AppPostConfig(json);
    if (json.server)
        config.server = {
            entry: json.server.entry ?? schema.properties.server.properties.entry.default,
        };
    if (json.blocks)
        config.blocks = {
            entry: json.blocks.entry ?? schema.properties.blocks.properties.entry.default,
        };
    // Deep copy so schema is not mutated.
    return structuredClone(config);
}
function AppPermissionConfig(json) {
    return {
        http: {
            // "Defaults to true when `server` is set" or the `http` object exists.
            enabled: json.permissions?.http?.enabled ?? (json.server ? true : !!json.permissions?.http),
            allowedDomains: json.permissions?.http?.allowedDomains ??
                schema.properties.permissions.properties.http.properties.allowedDomains.default,
        },
        media: json.permissions?.media ?? schema.properties.permissions.properties.media.default,
        payments: json.permissions?.payments ?? schema.properties.permissions.properties.payments.default,
        realtime: json.permissions?.realtime ?? schema.properties.permissions.properties.realtime.default,
        redis: json.permissions?.redis ??
            // Menu items call addCSRFTokenToContext() which uses Redis.
            json.post?.create?.menu?.enable ??
            (json.post ? true : schema.properties.permissions.properties.redis.default),
        reddit: {
            // "Defaults to true when `post` is set" or the `reddit` object exists.
            enabled: json.permissions?.reddit?.enabled ?? (json.post ? true : !!json.permissions?.reddit),
            scope: json.permissions?.reddit?.scope ??
                schema.properties.permissions.properties.reddit.properties.scope
                    .default,
            asUser: json.permissions?.reddit?.asUser ??
                schema.properties.permissions.properties.reddit.properties.asUser.default,
        },
    };
}
function AppPostConfig(json) {
    return {
        client: {
            dir: json.post?.client?.dir ?? schema.properties.post.properties.client.properties.dir.default,
            entry: json.post?.client?.entry ??
                schema.properties.post.properties.client.properties.entry.default,
        },
        create: {
            // "Defaults to `name`."
            title: json.post?.create?.title ?? json.name,
            height: json.post?.create?.height ??
                schema.properties.post.properties.create.properties.height.default,
            menu: {
                enable: json.post?.create?.menu?.enable ??
                    schema.properties.post.properties.create.properties.menu.properties.enable.default,
                // "Defaults to `"[<name>] New Post"` where "<name>" is `name`."
                label: json.post?.create?.menu?.label ?? `[${json.name}] New Post`,
                scope: json.post?.create?.menu?.scope ??
                    schema.properties.post.properties.create.properties.menu.properties.scope
                        .default,
            },
            onInstall: json.post?.create?.onInstall ??
                schema.properties.post.properties.create.properties.onInstall.default,
        },
    };
}

/**
 * #context.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface WebViewContext {
    /** Subreddit Thing ID (t5) */
    subredditId: string;
    subredditName: string;
    /** User Thing ID (t2) */
    userId: string;
    appName: string;
    appVersion: string;
    /** Post Thing ID (t3) */
    postId: string;
}
export declare const WebViewContext: {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewContext";
    encode(message: WebViewContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewContext;
    fromJSON(object: any): WebViewContext;
    toJSON(message: WebViewContext): unknown;
    create(base?: DeepPartial<WebViewContext>): WebViewContext;
    fromPartial(object: DeepPartial<WebViewContext>): WebViewContext;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=context.d.ts.map
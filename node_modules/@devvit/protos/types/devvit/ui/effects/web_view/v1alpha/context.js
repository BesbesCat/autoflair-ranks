/**
 * #context.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
function createBaseWebViewContext() {
    return { subredditId: "", subredditName: "", userId: "", appName: "", appVersion: "", postId: "" };
}
export const WebViewContext = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewContext",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subredditId !== "") {
            writer.uint32(10).string(message.subredditId);
        }
        if (message.subredditName !== "") {
            writer.uint32(18).string(message.subredditName);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.appName !== "") {
            writer.uint32(34).string(message.appName);
        }
        if (message.appVersion !== "") {
            writer.uint32(42).string(message.appVersion);
        }
        if (message.postId !== "") {
            writer.uint32(50).string(message.postId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subredditName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : "",
            subredditName: isSet(object.subredditName) ? globalThis.String(object.subredditName) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subredditId !== "") {
            obj.subredditId = message.subredditId;
        }
        if (message.subredditName !== "") {
            obj.subredditName = message.subredditName;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.appVersion !== "") {
            obj.appVersion = message.appVersion;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        return obj;
    },
    create(base) {
        return WebViewContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewContext();
        message.subredditId = object.subredditId ?? "";
        message.subredditName = object.subredditName ?? "";
        message.userId = object.userId ?? "";
        message.appName = object.appName ?? "";
        message.appVersion = object.appVersion ?? "";
        message.postId = object.postId ?? "";
        return message;
    },
};
messageTypeRegistry.set(WebViewContext.$type, WebViewContext);
function isSet(value) {
    return value !== null && value !== undefined;
}
